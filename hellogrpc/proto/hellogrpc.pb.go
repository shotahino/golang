// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hellogrpc.proto

/*
Package hellogrpc is a generated protocol buffer package.

It is generated from these files:
	hellogrpc.proto

It has these top-level messages:
	Request
	Response
*/
package hellogrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Response struct {
	Motd string `protobuf:"bytes,1,opt,name=motd" json:"motd,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetMotd() string {
	if m != nil {
		return m.Motd
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "hellogrpc.Request")
	proto.RegisterType((*Response)(nil), "hellogrpc.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MOTD service

type MOTDClient interface {
	// *
	// input - user
	// returns - message of the day
	Greeting(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type mOTDClient struct {
	cc *grpc.ClientConn
}

func NewMOTDClient(cc *grpc.ClientConn) MOTDClient {
	return &mOTDClient{cc}
}

func (c *mOTDClient) Greeting(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/hellogrpc.MOTD/Greeting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MOTD service

type MOTDServer interface {
	// *
	// input - user
	// returns - message of the day
	Greeting(context.Context, *Request) (*Response, error)
}

func RegisterMOTDServer(s *grpc.Server, srv MOTDServer) {
	s.RegisterService(&_MOTD_serviceDesc, srv)
}

func _MOTD_Greeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MOTDServer).Greeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hellogrpc.MOTD/Greeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MOTDServer).Greeting(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _MOTD_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hellogrpc.MOTD",
	HandlerType: (*MOTDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greeting",
			Handler:    _MOTD_Greeting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hellogrpc.proto",
}

func init() { proto.RegisterFile("hellogrpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x48, 0xcd, 0xc9,
	0xc9, 0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0xc9, 0x72, 0xb1, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x71, 0xb1, 0xe4, 0x25,
	0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0x72, 0x5c, 0x1c, 0x41,
	0xa9, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x20, 0xf9, 0xdc, 0xfc, 0x92, 0x14, 0x98, 0x3c, 0x88,
	0x6d, 0x64, 0xcb, 0xc5, 0xe2, 0xeb, 0x1f, 0xe2, 0x22, 0x64, 0xca, 0xc5, 0xe1, 0x5e, 0x94, 0x9a,
	0x5a, 0x92, 0x99, 0x97, 0x2e, 0x24, 0xa4, 0x87, 0xb0, 0x0f, 0x6a, 0xb6, 0x94, 0x30, 0x8a, 0x18,
	0xc4, 0x40, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x7b, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff,
	0x58, 0x8b, 0x5e, 0xa2, 0x00, 0x00, 0x00,
}
